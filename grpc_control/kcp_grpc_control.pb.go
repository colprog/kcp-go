// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: kcp_grpc_control.proto

package grpc_control

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SessionStatus int32

const (
	SessionStatus_SessionTypeNormal       SessionStatus = 0
	SessionStatus_SessionTypeExistMetered SessionStatus = 1
	SessionStatus_SessionTypeOnlyMetered  SessionStatus = 2
)

// Enum value maps for SessionStatus.
var (
	SessionStatus_name = map[int32]string{
		0: "SessionTypeNormal",
		1: "SessionTypeExistMetered",
		2: "SessionTypeOnlyMetered",
	}
	SessionStatus_value = map[string]int32{
		"SessionTypeNormal":       0,
		"SessionTypeExistMetered": 1,
		"SessionTypeOnlyMetered":  2,
	}
)

func (x SessionStatus) Enum() *SessionStatus {
	p := new(SessionStatus)
	*p = x
	return p
}

func (x SessionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_kcp_grpc_control_proto_enumTypes[0].Descriptor()
}

func (SessionStatus) Type() protoreflect.EnumType {
	return &file_kcp_grpc_control_proto_enumTypes[0]
}

func (x SessionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionStatus.Descriptor instead.
func (SessionStatus) EnumDescriptor() ([]byte, []int) {
	return file_kcp_grpc_control_proto_rawDescGZIP(), []int{0}
}

type GetSessionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSessionsRequest) Reset() {
	*x = GetSessionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kcp_grpc_control_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSessionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionsRequest) ProtoMessage() {}

func (x *GetSessionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kcp_grpc_control_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionsRequest.ProtoReflect.Descriptor instead.
func (*GetSessionsRequest) Descriptor() ([]byte, []int) {
	return file_kcp_grpc_control_proto_rawDescGZIP(), []int{0}
}

type GetSessionsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connections []*ConnectionInfo `protobuf:"bytes,1,rep,name=connections,proto3" json:"connections,omitempty"`
}

func (x *GetSessionsReply) Reset() {
	*x = GetSessionsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kcp_grpc_control_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSessionsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionsReply) ProtoMessage() {}

func (x *GetSessionsReply) ProtoReflect() protoreflect.Message {
	mi := &file_kcp_grpc_control_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionsReply.ProtoReflect.Descriptor instead.
func (*GetSessionsReply) Descriptor() ([]byte, []int) {
	return file_kcp_grpc_control_proto_rawDescGZIP(), []int{1}
}

func (x *GetSessionsReply) GetConnections() []*ConnectionInfo {
	if x != nil {
		return x.Connections
	}
	return nil
}

type ConnectionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status                 SessionStatus `protobuf:"varint,1,opt,name=status,proto3,enum=kcp_ctl.SessionStatus" json:"status,omitempty"`
	SentBytes              uint64        `protobuf:"varint,2,opt,name=sent_bytes,json=sentBytes,proto3" json:"sent_bytes,omitempty"`
	RecvBytes              uint64        `protobuf:"varint,3,opt,name=recv_bytes,json=recvBytes,proto3" json:"recv_bytes,omitempty"`
	DroptBytes             uint64        `protobuf:"varint,4,opt,name=dropt_bytes,json=droptBytes,proto3" json:"dropt_bytes,omitempty"`
	MaxConn                uint64        `protobuf:"varint,5,opt,name=max_conn,json=maxConn,proto3" json:"max_conn,omitempty"`
	ActiveOpens            uint64        `protobuf:"varint,6,opt,name=active_opens,json=activeOpens,proto3" json:"active_opens,omitempty"`
	PassiveOpens           uint64        `protobuf:"varint,7,opt,name=passive_opens,json=passiveOpens,proto3" json:"passive_opens,omitempty"`
	CurrEstab              uint64        `protobuf:"varint,8,opt,name=curr_estab,json=currEstab,proto3" json:"curr_estab,omitempty"`
	InErrs                 uint64        `protobuf:"varint,9,opt,name=in_errs,json=inErrs,proto3" json:"in_errs,omitempty"`
	InCsumErrs             uint64        `protobuf:"varint,10,opt,name=in_csum_errs,json=inCsumErrs,proto3" json:"in_csum_errs,omitempty"`
	KcpInErrs              uint64        `protobuf:"varint,11,opt,name=kcp_in_errs,json=kcpInErrs,proto3" json:"kcp_in_errs,omitempty"`
	InPkts                 uint64        `protobuf:"varint,12,opt,name=in_pkts,json=inPkts,proto3" json:"in_pkts,omitempty"`
	OutPkts                uint64        `protobuf:"varint,13,opt,name=out_pkts,json=outPkts,proto3" json:"out_pkts,omitempty"`
	InSegs                 uint64        `protobuf:"varint,14,opt,name=in_segs,json=inSegs,proto3" json:"in_segs,omitempty"`
	OutSegs                uint64        `protobuf:"varint,15,opt,name=out_segs,json=outSegs,proto3" json:"out_segs,omitempty"`
	InBytes                uint64        `protobuf:"varint,16,opt,name=in_bytes,json=inBytes,proto3" json:"in_bytes,omitempty"`
	OutBytes               uint64        `protobuf:"varint,17,opt,name=out_bytes,json=outBytes,proto3" json:"out_bytes,omitempty"`
	RetransSegs            uint64        `protobuf:"varint,18,opt,name=retrans_segs,json=retransSegs,proto3" json:"retrans_segs,omitempty"`
	FastRetransSegs        uint64        `protobuf:"varint,19,opt,name=fast_retrans_segs,json=fastRetransSegs,proto3" json:"fast_retrans_segs,omitempty"`
	EarlyRetransSegs       uint64        `protobuf:"varint,20,opt,name=early_retrans_segs,json=earlyRetransSegs,proto3" json:"early_retrans_segs,omitempty"`
	LostSegs               uint64        `protobuf:"varint,21,opt,name=lost_segs,json=lostSegs,proto3" json:"lost_segs,omitempty"`
	RepeatSegs             uint64        `protobuf:"varint,22,opt,name=repeat_segs,json=repeatSegs,proto3" json:"repeat_segs,omitempty"`
	FecRecovered           uint64        `protobuf:"varint,23,opt,name=fec_recovered,json=fecRecovered,proto3" json:"fec_recovered,omitempty"`
	FecErrs                uint64        `protobuf:"varint,24,opt,name=fec_errs,json=fecErrs,proto3" json:"fec_errs,omitempty"`
	FecParityShards        uint64        `protobuf:"varint,25,opt,name=fec_parity_shards,json=fecParityShards,proto3" json:"fec_parity_shards,omitempty"`
	FecShortShards         uint64        `protobuf:"varint,26,opt,name=fec_short_shards,json=fecShortShards,proto3" json:"fec_short_shards,omitempty"`
	BytesSentFromNoMetered uint64        `protobuf:"varint,27,opt,name=bytes_sent_from_no_metered,json=bytesSentFromNoMetered,proto3" json:"bytes_sent_from_no_metered,omitempty"`
	BytesSentFromMetered   uint64        `protobuf:"varint,28,opt,name=bytes_sent_from_metered,json=bytesSentFromMetered,proto3" json:"bytes_sent_from_metered,omitempty"`
	BytesRecvFromNoMetered uint64        `protobuf:"varint,29,opt,name=bytes_recv_from_no_metered,json=bytesRecvFromNoMetered,proto3" json:"bytes_recv_from_no_metered,omitempty"`
	BytesRecvFromMetered   uint64        `protobuf:"varint,30,opt,name=bytes_recv_from_metered,json=bytesRecvFromMetered,proto3" json:"bytes_recv_from_metered,omitempty"`
	SegsAcked              uint64        `protobuf:"varint,31,opt,name=segs_acked,json=segsAcked,proto3" json:"segs_acked,omitempty"`
	SegsPromoteAcked       uint64        `protobuf:"varint,32,opt,name=segs_promote_acked,json=segsPromoteAcked,proto3" json:"segs_promote_acked,omitempty"`
}

func (x *ConnectionInfo) Reset() {
	*x = ConnectionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kcp_grpc_control_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionInfo) ProtoMessage() {}

func (x *ConnectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_kcp_grpc_control_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionInfo.ProtoReflect.Descriptor instead.
func (*ConnectionInfo) Descriptor() ([]byte, []int) {
	return file_kcp_grpc_control_proto_rawDescGZIP(), []int{2}
}

func (x *ConnectionInfo) GetStatus() SessionStatus {
	if x != nil {
		return x.Status
	}
	return SessionStatus_SessionTypeNormal
}

func (x *ConnectionInfo) GetSentBytes() uint64 {
	if x != nil {
		return x.SentBytes
	}
	return 0
}

func (x *ConnectionInfo) GetRecvBytes() uint64 {
	if x != nil {
		return x.RecvBytes
	}
	return 0
}

func (x *ConnectionInfo) GetDroptBytes() uint64 {
	if x != nil {
		return x.DroptBytes
	}
	return 0
}

func (x *ConnectionInfo) GetMaxConn() uint64 {
	if x != nil {
		return x.MaxConn
	}
	return 0
}

func (x *ConnectionInfo) GetActiveOpens() uint64 {
	if x != nil {
		return x.ActiveOpens
	}
	return 0
}

func (x *ConnectionInfo) GetPassiveOpens() uint64 {
	if x != nil {
		return x.PassiveOpens
	}
	return 0
}

func (x *ConnectionInfo) GetCurrEstab() uint64 {
	if x != nil {
		return x.CurrEstab
	}
	return 0
}

func (x *ConnectionInfo) GetInErrs() uint64 {
	if x != nil {
		return x.InErrs
	}
	return 0
}

func (x *ConnectionInfo) GetInCsumErrs() uint64 {
	if x != nil {
		return x.InCsumErrs
	}
	return 0
}

func (x *ConnectionInfo) GetKcpInErrs() uint64 {
	if x != nil {
		return x.KcpInErrs
	}
	return 0
}

func (x *ConnectionInfo) GetInPkts() uint64 {
	if x != nil {
		return x.InPkts
	}
	return 0
}

func (x *ConnectionInfo) GetOutPkts() uint64 {
	if x != nil {
		return x.OutPkts
	}
	return 0
}

func (x *ConnectionInfo) GetInSegs() uint64 {
	if x != nil {
		return x.InSegs
	}
	return 0
}

func (x *ConnectionInfo) GetOutSegs() uint64 {
	if x != nil {
		return x.OutSegs
	}
	return 0
}

func (x *ConnectionInfo) GetInBytes() uint64 {
	if x != nil {
		return x.InBytes
	}
	return 0
}

func (x *ConnectionInfo) GetOutBytes() uint64 {
	if x != nil {
		return x.OutBytes
	}
	return 0
}

func (x *ConnectionInfo) GetRetransSegs() uint64 {
	if x != nil {
		return x.RetransSegs
	}
	return 0
}

func (x *ConnectionInfo) GetFastRetransSegs() uint64 {
	if x != nil {
		return x.FastRetransSegs
	}
	return 0
}

func (x *ConnectionInfo) GetEarlyRetransSegs() uint64 {
	if x != nil {
		return x.EarlyRetransSegs
	}
	return 0
}

func (x *ConnectionInfo) GetLostSegs() uint64 {
	if x != nil {
		return x.LostSegs
	}
	return 0
}

func (x *ConnectionInfo) GetRepeatSegs() uint64 {
	if x != nil {
		return x.RepeatSegs
	}
	return 0
}

func (x *ConnectionInfo) GetFecRecovered() uint64 {
	if x != nil {
		return x.FecRecovered
	}
	return 0
}

func (x *ConnectionInfo) GetFecErrs() uint64 {
	if x != nil {
		return x.FecErrs
	}
	return 0
}

func (x *ConnectionInfo) GetFecParityShards() uint64 {
	if x != nil {
		return x.FecParityShards
	}
	return 0
}

func (x *ConnectionInfo) GetFecShortShards() uint64 {
	if x != nil {
		return x.FecShortShards
	}
	return 0
}

func (x *ConnectionInfo) GetBytesSentFromNoMetered() uint64 {
	if x != nil {
		return x.BytesSentFromNoMetered
	}
	return 0
}

func (x *ConnectionInfo) GetBytesSentFromMetered() uint64 {
	if x != nil {
		return x.BytesSentFromMetered
	}
	return 0
}

func (x *ConnectionInfo) GetBytesRecvFromNoMetered() uint64 {
	if x != nil {
		return x.BytesRecvFromNoMetered
	}
	return 0
}

func (x *ConnectionInfo) GetBytesRecvFromMetered() uint64 {
	if x != nil {
		return x.BytesRecvFromMetered
	}
	return 0
}

func (x *ConnectionInfo) GetSegsAcked() uint64 {
	if x != nil {
		return x.SegsAcked
	}
	return 0
}

func (x *ConnectionInfo) GetSegsPromoteAcked() uint64 {
	if x != nil {
		return x.SegsPromoteAcked
	}
	return 0
}

type RegsiterNewSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAddress string `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	Port      int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *RegsiterNewSessionRequest) Reset() {
	*x = RegsiterNewSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kcp_grpc_control_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegsiterNewSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegsiterNewSessionRequest) ProtoMessage() {}

func (x *RegsiterNewSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kcp_grpc_control_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegsiterNewSessionRequest.ProtoReflect.Descriptor instead.
func (*RegsiterNewSessionRequest) Descriptor() ([]byte, []int) {
	return file_kcp_grpc_control_proto_rawDescGZIP(), []int{3}
}

func (x *RegsiterNewSessionRequest) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *RegsiterNewSessionRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type RegsiterNewSessionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RegsiterNewSessionReply) Reset() {
	*x = RegsiterNewSessionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kcp_grpc_control_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegsiterNewSessionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegsiterNewSessionReply) ProtoMessage() {}

func (x *RegsiterNewSessionReply) ProtoReflect() protoreflect.Message {
	mi := &file_kcp_grpc_control_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegsiterNewSessionReply.ProtoReflect.Descriptor instead.
func (*RegsiterNewSessionReply) Descriptor() ([]byte, []int) {
	return file_kcp_grpc_control_proto_rawDescGZIP(), []int{4}
}

var File_kcp_grpc_control_proto protoreflect.FileDescriptor

var file_kcp_grpc_control_proto_rawDesc = []byte{
	0x0a, 0x16, 0x6b, 0x63, 0x70, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6b, 0x63, 0x70, 0x5f, 0x63, 0x74,
	0x6c, 0x22, 0x14, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x39, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6b, 0x63, 0x70, 0x5f, 0x63, 0x74, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa0, 0x09, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6b, 0x63, 0x70, 0x5f,
	0x63, 0x74, 0x6c, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6e,
	0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73,
	0x65, 0x6e, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x76,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65,
	0x63, 0x76, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x72, 0x6f, 0x70, 0x74,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x72,
	0x6f, 0x70, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x43,
	0x6f, 0x6e, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x4f, 0x70, 0x65, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76,
	0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70,
	0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x75, 0x72, 0x72, 0x5f, 0x65, 0x73, 0x74, 0x61, 0x62, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x63, 0x75, 0x72, 0x72, 0x45, 0x73, 0x74, 0x61, 0x62, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e,
	0x5f, 0x65, 0x72, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x69, 0x6e, 0x45,
	0x72, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x6e, 0x5f, 0x63, 0x73, 0x75, 0x6d, 0x5f, 0x65,
	0x72, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x69, 0x6e, 0x43, 0x73, 0x75,
	0x6d, 0x45, 0x72, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x6b, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x5f,
	0x65, 0x72, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6b, 0x63, 0x70, 0x49,
	0x6e, 0x45, 0x72, 0x72, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x5f, 0x70, 0x6b, 0x74, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x69, 0x6e, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x6f, 0x75, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x5f,
	0x73, 0x65, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x69, 0x6e, 0x53, 0x65,
	0x67, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x67, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x67, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x69, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6f, 0x75, 0x74,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x5f, 0x73, 0x65, 0x67, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x65, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x53, 0x65, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x61, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x67, 0x73, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x66, 0x61, 0x73, 0x74, 0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x53, 0x65, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x5f, 0x72, 0x65,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x67, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x53, 0x65,
	0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x67, 0x73, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x67, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x5f, 0x73, 0x65, 0x67, 0x73, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x53, 0x65, 0x67, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x66, 0x65, 0x63, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65,
	0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x66, 0x65, 0x63, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x65, 0x63, 0x5f, 0x65, 0x72, 0x72,
	0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x66, 0x65, 0x63, 0x45, 0x72, 0x72, 0x73,
	0x12, 0x2a, 0x0a, 0x11, 0x66, 0x65, 0x63, 0x5f, 0x70, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x66, 0x65, 0x63,
	0x50, 0x61, 0x72, 0x69, 0x74, 0x79, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x10,
	0x66, 0x65, 0x63, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x66, 0x65, 0x63, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x1a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6e, 0x6f, 0x5f, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x53, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x4e, 0x6f, 0x4d, 0x65, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x14, 0x62, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x46, 0x72,
	0x6f, 0x6d, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x1a, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6e, 0x6f, 0x5f,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x76, 0x46, 0x72, 0x6f, 0x6d, 0x4e, 0x6f, 0x4d, 0x65,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x76, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63,
	0x76, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x67, 0x73, 0x5f, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x73, 0x65, 0x67, 0x73, 0x41, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73,
	0x65, 0x67, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x6b, 0x65,
	0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x73, 0x65, 0x67, 0x73, 0x50, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x65, 0x64, 0x22, 0x4e, 0x0a, 0x19, 0x52, 0x65, 0x67,
	0x73, 0x69, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x19, 0x0a, 0x17, 0x52, 0x65, 0x67,
	0x73, 0x69, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x2a, 0x5f, 0x0a, 0x0d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x4d, 0x65, 0x74, 0x65, 0x72, 0x65, 0x64, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x4d, 0x65, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x10, 0x02, 0x32, 0xb2, 0x01, 0x0a, 0x0d, 0x4b, 0x43, 0x50, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x74, 0x6c, 0x12, 0x45, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x2e, 0x6b, 0x63, 0x70, 0x5f, 0x63, 0x74, 0x6c,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6b, 0x63, 0x70, 0x5f, 0x63, 0x74, 0x6c, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5a,
	0x0a, 0x12, 0x52, 0x65, 0x67, 0x73, 0x69, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x6b, 0x63, 0x70, 0x5f, 0x63, 0x74, 0x6c, 0x2e, 0x52,
	0x65, 0x67, 0x73, 0x69, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6b, 0x63, 0x70, 0x5f, 0x63,
	0x74, 0x6c, 0x2e, 0x52, 0x65, 0x67, 0x73, 0x69, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x78, 0x74, 0x61, 0x63, 0x69, 0x2f, 0x6b,
	0x63, 0x70, 0x2d, 0x67, 0x6f, 0x2f, 0x76, 0x35, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kcp_grpc_control_proto_rawDescOnce sync.Once
	file_kcp_grpc_control_proto_rawDescData = file_kcp_grpc_control_proto_rawDesc
)

func file_kcp_grpc_control_proto_rawDescGZIP() []byte {
	file_kcp_grpc_control_proto_rawDescOnce.Do(func() {
		file_kcp_grpc_control_proto_rawDescData = protoimpl.X.CompressGZIP(file_kcp_grpc_control_proto_rawDescData)
	})
	return file_kcp_grpc_control_proto_rawDescData
}

var file_kcp_grpc_control_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_kcp_grpc_control_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_kcp_grpc_control_proto_goTypes = []interface{}{
	(SessionStatus)(0),                // 0: kcp_ctl.SessionStatus
	(*GetSessionsRequest)(nil),        // 1: kcp_ctl.GetSessionsRequest
	(*GetSessionsReply)(nil),          // 2: kcp_ctl.GetSessionsReply
	(*ConnectionInfo)(nil),            // 3: kcp_ctl.ConnectionInfo
	(*RegsiterNewSessionRequest)(nil), // 4: kcp_ctl.RegsiterNewSessionRequest
	(*RegsiterNewSessionReply)(nil),   // 5: kcp_ctl.RegsiterNewSessionReply
}
var file_kcp_grpc_control_proto_depIdxs = []int32{
	3, // 0: kcp_ctl.GetSessionsReply.connections:type_name -> kcp_ctl.ConnectionInfo
	0, // 1: kcp_ctl.ConnectionInfo.status:type_name -> kcp_ctl.SessionStatus
	1, // 2: kcp_ctl.KCPSessionCtl.GetSessions:input_type -> kcp_ctl.GetSessionsRequest
	4, // 3: kcp_ctl.KCPSessionCtl.RegsiterNewSession:input_type -> kcp_ctl.RegsiterNewSessionRequest
	2, // 4: kcp_ctl.KCPSessionCtl.GetSessions:output_type -> kcp_ctl.GetSessionsReply
	5, // 5: kcp_ctl.KCPSessionCtl.RegsiterNewSession:output_type -> kcp_ctl.RegsiterNewSessionReply
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_kcp_grpc_control_proto_init() }
func file_kcp_grpc_control_proto_init() {
	if File_kcp_grpc_control_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kcp_grpc_control_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSessionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kcp_grpc_control_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSessionsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kcp_grpc_control_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kcp_grpc_control_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegsiterNewSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kcp_grpc_control_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegsiterNewSessionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kcp_grpc_control_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kcp_grpc_control_proto_goTypes,
		DependencyIndexes: file_kcp_grpc_control_proto_depIdxs,
		EnumInfos:         file_kcp_grpc_control_proto_enumTypes,
		MessageInfos:      file_kcp_grpc_control_proto_msgTypes,
	}.Build()
	File_kcp_grpc_control_proto = out.File
	file_kcp_grpc_control_proto_rawDesc = nil
	file_kcp_grpc_control_proto_goTypes = nil
	file_kcp_grpc_control_proto_depIdxs = nil
}
